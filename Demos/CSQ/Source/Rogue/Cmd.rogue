module CSQ

class Cmd
  PROPERTIES
    t : Token

  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 0 )

    method dispatch( visitor:Visitor )->Cmd [propagated]
      return visitor.visit( this )

    method to->String
      local result = StringBuilder()
      write( result )
      return result->String

    method write( builder:StringBuilder )
      builder.print( type_name.after_any("Cmd") )

    method write( cmd:Cmd, builder:StringBuilder )
      if (cmd) cmd.write( builder )
      else      builder.print( "null" )
endClass

class CmdList : Cmd
  PROPERTIES
    list : Cmd[]

  METHODS
    method init( t )
      list = Cmd[](5)

    method init( t, args:CmdInitArgs )
      list = Cmd[]( args.count )
      list.add( forEach in args )

    method count->Int32
      return list.count

    method first->Cmd
      return list.first

    method get( index:Int32 )->Cmd
      return list[ index ]

    method last->Cmd
      return list.last

    method set( index:Int32, value:Cmd )->this
      list[ index ] = value
      return this

    method write( builder:StringBuilder )
      builder.print( '[' )
      forEach (arg at index in list)
        if (index > 0) builder.print( ',' )
        write( arg, builder )
      endForEach
      builder.print( ']' )
endClass

class Statements : CmdList
  METHODS
    method write( builder:StringBuilder )
      forEach (statement in list)
        write( statement, builder )
        builder.println
      endForEach
endClass

class Unary( t, operand:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 1 )
      operand = args.first

    method op->String
      throw UnsupportedOperationError()

    method write( builder:StringBuilder )
      builder.print( '(' ).print( op )
      write( operand, builder )
      builder.print( ')' )
endClass

class PostUnary : Unary
  METHODS
    method write( builder:StringBuilder )
      builder.print( '(' )
      write( operand, builder )
      builder.print( op ).print( ')' )
endClass

class Binary( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 2 )
      left = args.first
      right = args.last

    method op->String
      throw UnsupportedOperationError()

    method write( builder:StringBuilder )
      builder.print( '(' )
      write( left, builder )
      builder.print( ' ' ).print( op ).print( ' ' )
      write( right, builder )
      builder.print( ')' )
endClass


class If( t, condition:Cmd, body:Cmd, else_body:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 3 )
      this.condition = args[ 0 ]
      this.body = args[ 1 ]
      this.else_body = args[ 2 ]

    method write( builder:StringBuilder )
      builder.print( "If(" )
      write( condition, builder )
      builder.print( ',' )
      write( body, builder )
      builder.print( ',' )
      write( else_body, builder )
      builder.print( ')' )
endClass

class For( t, initializer:Cmd, condition:Cmd, modifier:Cmd, body:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 4 )
      this.initializer = args[ 0 ]
      this.condition = args[ 1 ]
      this.modifier = args[ 2 ]
      this.body = args[ 3 ]

    method write( builder:StringBuilder )
      builder.print( "For(" )
      write( initializer, builder )
      builder.print( ',' )
      write( condition, builder )
      builder.print( ',' )
      write( modifier, builder )
      builder.print( ',' )
      write( body, builder )
      builder.print( ')' )
endClass

class While( t, condition:Cmd, body:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 2 )
      this.condition = args[ 0 ]
      this.body = args[ 1 ]

    method write( builder:StringBuilder )
      builder.print( "While(" )
      write( condition, builder )
      builder.print( ',' )
      write( body, builder )
      builder.print( ')' )
endClass

class Name( t, value:String ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 0 )
      this.value = t.content

    method write( builder:StringBuilder )
      builder.print( value )
endClass

class LocalDeclaration( t, type:Cmd, name:Cmd, initial_value:Cmd ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 3 )
      this.type = args[ 0 ]
      this.name = args[ 1 ]
      this.initial_value = args[ 2 ]

    method write( builder:StringBuilder )
      builder.print( "LocalDeclaration(" )
      write( type, builder )
      builder.print( ',' )
      write( name, builder )
      builder.print( ',' )
      write( initial_value, builder )
      builder.print( ')' )
endClass

class Assign : Binary
  METHODS
    method op->String
      return "="
endClass

class AddAndAssign : Binary
  METHODS
    method op->String
      return "+="
endClass

class SubtractAndAssign : Binary
  METHODS
    method op->String
      return "-="
endClass

class MultiplyAndAssign : Binary
  METHODS
    method op->String
      return "*="
endClass

class DivideAndAssign : Binary
  METHODS
    method op->String
      return "/="
endClass

class ModAndAssign : Binary
  METHODS
    method op->String
      return "%="
endClass

class AndAndAssign : Binary
  METHODS
    method op->String
      return "&="
endClass

class OrAndAssign : Binary
  METHODS
    method op->String
      return "|="
endClass

class CompareEQ : Binary
  METHODS
    method op->String
      return "=="
endClass

class CompareNE : Binary
  METHODS
    method op->String
      return "!="
endClass

class CompareLT : Binary
  METHODS
    method op->String
      return "<"
endClass

class CompareGT : Binary
  METHODS
    method op->String
      return ">"
endClass

class CompareLE : Binary
  METHODS
    method op->String
      return "<="
endClass

class CompareGE : Binary
  METHODS
    method op->String
      return ">="
endClass

class Add : Binary
  METHODS
    method op->String
      return "+"
endClass

class Subtract : Binary
  METHODS
    method op->String
      return "-"
endClass

class Multiply : Binary
  METHODS
    method op->String
      return "*"
endClass

class Divide : Binary
  METHODS
    method op->String
      return "/"
endClass

class Negate : Unary
  METHODS
    method op->String
      return "-"
endClass

class PreIncrement : Unary
  METHODS
    method op->String
      return "++"
endClass

class PreDecrement : Unary
  METHODS
    method op->String
      return "--"
endClass

class PostIncrement : PostUnary
  METHODS
    method op->String
      return "++"
endClass

class PostDecrement : PostUnary
  METHODS
    method op->String
      return "--"
endClass

class Access( t, value:String ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 0 )
      this.value = t.content

    method write( builder:StringBuilder )
      builder.print( value )
endClass

class LiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method init( t, args:CmdInitArgs )
      args.require_count( 0 )
      this.value = t.content->Int32

    method write( builder:StringBuilder )
      builder.print( ""+value )
endClass
