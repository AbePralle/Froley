module BadBasic

class Runtime [singleton]
  PROPERTIES
    variables = @{}
endClass

augment Cmd
  METHODS
    method call->Value
      throw t.error( "[INTERNAL] $ does not define call()."(type_name) )

    method get_value( index:Int32 )->Value
      # Have to call this get_value() since CmdList already has get(Int32).
      # Can't call the set methods set_value() because it would become a 
      # setter for Literal cmds with 'value' properties.
      throw t.error( "Illegal access." )

    method require_arg_count( args:CmdList, n:Int32 )
      require_arg_count( args, n, n )

    method require_arg_count( args:CmdList, min=null:Int32?, max=null:Int32? )
      local n = args.count
      if (min == max and min.value != n)
        local name = type_name.after_any( "Fn" ).to_lowercase
        throw t.error( "$() takes exactly $ ($ given)." (name,"# arguments".pluralized(min.value),n) )
      endIf
      if (min.exists and n < min.value)
        local name = type_name.after_any( "Fn" ).to_lowercase
        throw t.error( "$() takes at least $ ($ given)." (name,"# arguments".pluralized(min.value),n) )
      endIf
      if (max.exists and n > max.value)
        local name = type_name.after_any( "Fn" ).to_lowercase
        throw t.error( "$() takes at most $ ($ given)." (name,"# arguments".pluralized(min.value),n) )
      endIf

    method set( new_value:Value )
      throw t.error( "Illegal assignment." )

    method set( index:Int32, new_value:Value )
      throw t.error( "Illegal indexed assignment." )

    method variable( name:String )->Value
      local result = Runtime.variables[ name ]
      if (result.is_undefined) throw t.error( "Use of undefined variable '$'."(name) )
      return result
endAugment

augment CmdList
  METHODS
    method call->Value
      local result = UndefinedValue : Value
      result = (forEach in this)()
      return result
endAugment

augment LiteralInt32
  METHODS
    method call->Value
      return value
endAugment

augment LiteralLogical
  METHODS
    method call->Value
      return value
endAugment

augment LiteralReal64
  METHODS
    method call->Value
      return value
endAugment

augment LiteralString
  METHODS
    method call->Value
      return value
endAugment

augment Echo
  METHODS
    method call->Value
      local result = expression()
      print( result ).flush
      return result
endAugment

augment Assign
  METHODS
    method call->Value
      local result = new_value()
      target.set( result )
      return result
endAugment

augment For
  METHODS
    method call->Value
      local first     = first()->Real64
      local last      = last()->Real64
      local step_size = which{ (step_size?):step_size()->Real64 || first<=last:1.0 || -1.0 }
      if (first < last and step_size < 0)     return UndefinedValue
      elseIf (first > last and step_size > 0) return UndefinedValue

      local cur = first
      Runtime.variables[ control ] = cur

      if (first <= last)
        if (step_size < 0) return UndefinedValue
        while (cur <= last)
          statements()
          cur += step_size
          Runtime.variables[ control ] = cur
        endWhile
      else
        if (step_size > 0) return UndefinedValue
        while (cur >= last)
          statements()
          cur += step_size
          Runtime.variables[ control ] = cur
        endWhile
      endIf

      return UndefinedValue

endAugment

augment If
  METHODS
    method call->Value
      local result = UndefinedValue : Value

      if (condition()->Logical)
        result = (forEach in statements)()

      elseIf (else_statements)
        result = (forEach in else_statements)()

      endIf

      return result
endAugment

augment Print
  METHODS
    method call->Value
      if (expression)
        local result = expression()
        println result
        return result
      else
        println
        return UndefinedValue
      endIf
endAugment

augment While
  METHODS
    method call->Value
      while (condition())
        (forEach in statements)()
      endWhile
      return UndefinedValue
endAugment

augment LogicalOr
  METHODS
    method call->Value
      return left() or right()
endAugment

augment LogicalAnd
  METHODS
    method call->Value
      return left() and right()
endAugment

augment CompareEQ
  METHODS
    method call->Value
      return left() == right()
endAugment

augment CompareNE
  METHODS
    method call->Value
      return left() != right()
endAugment

augment CompareLT
  METHODS
    method call->Value
      return left() < right()
endAugment

augment CompareGT
  METHODS
    method call->Value
      return left() > right()
endAugment

augment CompareLE
  METHODS
    method call->Value
      return left() <= right()
endAugment

augment CompareGE
  METHODS
    method call->Value
      return left() >= right()
endAugment

augment Add
  METHODS
    method call->Value
      local left = left()
      local right = right()
      if (right.is_string)
        return left->String + right
      else
        return left + right
      endIf
endAugment

augment Subtract
  METHODS
    method call->Value
      return left() - right()
endAugment

augment Multiply
  METHODS
    method call->Value
      return left() * right()
endAugment

augment RealDivide
  METHODS
    method call->Value
      return left() / right()
endAugment

augment IntegerDivide
  METHODS
    method call->Value
      return (left() / right())->Real64.floor
endAugment

augment Negate
  METHODS
    method call->Value
      return -(operand()->Real64)
endAugment

augment IndexedAccess
  METHODS
    method call->Value
      return context.get_value( index()->Int32 )

    method set( new_value:Value )
      context.set( index()->Int32, new_value )
endAugment

augment FnAtan
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      return Math.atan( args[0]() )
endAugment

augment FnAtan2
  METHODS
    method call->Value
      require_arg_count( args, 2 )
      return Math.atan2( args[0](), args[1]() )
endAugment

augment FnCos
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      return Math.cos( args[0]() )
endAugment

augment FnDim
  METHODS
    method call->Value
      require_arg_count( args, 1, 2 )
      local initializer = Value( 0 )
      if (args.count == 2) initializer = args[1]()
      local n = args[0]() : Int32
      return Dim<<Value>>( n, () with (initializer) => initializer )
endAugment

augment FnExp
  METHODS
    method call->Value
      require_arg_count( args, 2 )
      return args[0]() ^ args[1]()
endAugment

augment FnFloat
  METHODS
    method call->Value
      require_arg_count( args, &max=1 )
      which (args.count)
        case 1
          local n = args[0]()
          return n->Real64
      endWhich
      return 0
endAugment

augment FnInput
  METHODS
    method call->Value
      require_arg_count( args, &max=1 )
      if (args.count) print( args.first->String ).flush
      return Console.input
endAugment

augment FnInt
  METHODS
    method call->Value
      require_arg_count( args, &max=2 )
      which (args.count)
        case 1
          local n = args[0]()
          return n->Int32
        case 2
          local n = args[0]()
          local base = args[1]() 
          return n->String->Int32( &base=base->Int32 )
      endWhich
      return 0
endAugment

augment FnJoin
  METHODS
    method call->Value
      require_arg_count( args, &max=2 )
      local separator = ""
      if (args.count == 2) separator = args[1]()
      local list = args[0]()

      use builder = StringBuilder.pool
        forEach (element at index in list)
          if (index > 0) builder.print separator
          builder.print( element )
        endForEach
        return builder->String
      endUse
endAugment

augment FnLen
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      local value = args[0]()
      return value.count
endAugment

augment FnList
  METHODS
    method call->Value
      local result = @[]
      result.add( (forEach in args)() )
      return result
endAugment

augment FnMax
  METHODS
    method call->Value
      require_arg_count( args, &min=1 )
      if (args.count > 1)
        local max = args[0]()
        forEach (arg in args from 1)
          local cur = arg()
          if (cur > max) max = cur
        endForEach
        return max
      else
        local iterable = args[0]()
        if (iterable.count == 0) return iterable
        if (iterable.count == 1) return iterable[0]
        local max = iterable[0]
        forEach (element in iterable from 1)
          if (element > max) max = element
        endForEach
        return max
      endIf
endAugment

augment FnMin
  METHODS
    method call->Value
      require_arg_count( args, &min=1 )
      if (args.count > 1)
        local min = args[0]()
        forEach (arg in args from 1)
          local cur = arg()
          if (cur < min) min = cur
        endForEach
        return min
      else
        local iterable = args[0]()
        if (iterable.count == 0) return iterable
        if (iterable.count == 1) return iterable[0]
        local min = iterable[0]
        forEach (element in iterable from 1)
          if (element < min) min = element
        endForEach
        return min
      endIf
endAugment

augment FnRandFloat
  METHODS
    method call->Value
      require_arg_count( args, 0 )
      return Random.real64
endAugment

augment FnRandInt
  METHODS
    method call->Value
      require_arg_count( args, 2 )
      local low  = args[0]()
      local high = args[1]()
      return Random.int32( low, high )
endAugment

augment FnSin
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      return Math.sin( args[0]() )
endAugment

augment FnStr
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      local value = args[0]()
      return value->String
endAugment

augment FnTan
  METHODS
    method call->Value
      require_arg_count( args, 1 )
      return Math.tan( args[0]() )
endAugment

augment Access
  METHODS
    method call->Value
      return variable( name )

    method check_oob( list:Value, index:Int32 )
      if (index < 0 or index >= list.count)
        if (list.is_empty) throw t.error( "Index $ out of bounds (empty list)." )
        else               throw t.error( "Index $ out of bounds ($..$)"(index,0,list.count-1) )
      endIf

    method get_value( index:Int32 )->Value
      local list = variable( name )
      if (not list.is_list) prior.get_value( index )  # error
      check_oob( list, index )
      return list[ index ]

    method set( new_value:Value )
      Runtime.variables[ name ] = new_value

    method set( index:Int32, new_value:Value )
      local list = variable( name )
      if (not list.is_list) prior.set( index, new_value )  # error
      check_oob( list, index )
      list[ index ] = new_value
endAugment

