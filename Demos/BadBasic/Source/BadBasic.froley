[whitespace]
SPACE ' '
TAB   '\t'
CR    '\r'

[tokens]
# The [content] attribute signals that the contents of 'buffer' are stored
# as a token's content:String when the token is created.
EOL        '\n'
IDENTIFIER identifier [content]
INTEGER    integer    [content]
STRING     string     [content]

[keywords]
KEYWORD_AND       and
KEYWORD_ECHO      echo  
KEYWORD_ELSE      else     [endStructure]  # endStructure is arbitrary; can
KEYWORD_END       end      [endStructure]  # create your own attributes.
KEYWORD_ENDFOR    endfor   [endStructure]  # Only 'content' has special meaning.
KEYWORD_ENDIF     endif    [endStructure]
KEYWORD_ENDWHILE  endwhile [endStructure]
KEYWORD_FOR       for
KEYWORD_GOTO      goto  
KEYWORD_IF        if
KEYWORD_LABEL     label  
KEYWORD_LET       let  
KEYWORD_NEXT      next     [endStructure]
KEYWORD_OR        or
KEYWORD_PRINT     print
KEYWORD_STEP      step
KEYWORD_THEN      then
KEYWORD_TO        to
KEYWORD_WHILE     while

KEYWORD_ATAN      atan
KEYWORD_ATAN2     atan2
KEYWORD_COS       cos
KEYWORD_DIM       dim
KEYWORD_EXP       exp
KEYWORD_FLOAT     float
KEYWORD_INPUT     input
KEYWORD_INT       int
KEYWORD_JOIN      join
KEYWORD_LEN       len
KEYWORD_LIST      list
KEYWORD_MAX       max
KEYWORD_MIN       min
KEYWORD_RANDFLOAT randfloat
KEYWORD_RANDINT   randint
KEYWORD_SIN       sin
KEYWORD_STR       str
KEYWORD_TAN       tan

[symbols]
SYMBOL_ASTERISK             *
SYMBOL_CLOSE_PAREN          )   [endStructure]
SYMBOL_CLOSE_SQUARE         ]   [endStructure]
SYMBOL_EQ                   ==
SYMBOL_COMMA                ,
SYMBOL_EQUALS               =
SYMBOL_GE                   >=
SYMBOL_GT                   >
SYMBOL_LE                   <=
SYMBOL_LT                   <
SYMBOL_MINUS                -
SYMBOL_NE                   !=
SYMBOL_OPEN_PAREN           (
SYMBOL_OPEN_SQUARE          [
SYMBOL_PLUS                 +
SYMBOL_SLASH                /
SYMBOL_SLASH_SLASH          //

#===============================================================================

[tokenizer]

- tokenize
  which (input)
    discardAny [whitespace]
  endWhich

  markSourcePosition
  if (not hasAnother) halt

  scan_identifier_or_keyword

  which (input)
    produceAny [symbols]
    case '\n'
      produce EOL  # 'produce' halts execution which will restart at the top for the next token
    case '"'
      scan_string
    case '#'
      discard_comment
    others
      ch = peek
      if (ch is '0'..'9')
        scan_integer
        produce INTEGER
      endIf
  endWhich

  syntaxError

+ scan_identifier_or_keyword
  ch = peek
  if (ch is 'a'..'z' or ch is 'A'..'Z' or ch == '_')
    clear buffer
    while (ch is 'a'..'z' or ch is 'A'..'Z' or ch is '0'..'9' or ch == '_')
      ch = read
      collect ch
      ch = peek
    endWhile

    which (buffer)
      produceAny [keywords]
      case "rem": discard_comment
      others:     produce IDENTIFIER
    endWhich
  endIf
  return

+ scan_string
  while (hasAnother)
    ch = read
    if (ch == '"') produce STRING
    collect ch  # add ch to the internal string 'buffer'
  endWhile
  syntaxError "Unterminated string literal."

+ discard_comment
  while (hasAnother)
    ch = read
    if (ch == '\n') discard  # restarts tokenizer
  endWhile
  discard

+ scan_integer
  while (ch is '0'..'9' or ch == '_')
    ch = read
    if (ch != '_') collect ch
    if (not hasAnother) return
    ch = peek
  endWhile
  return

#===============================================================================
[parser]

- program
  statements

- statements
  beginList

  consume_eols
  while (hasAnother and not nextHasAttribute(endStructure))
    statement
    consume_eols
  endWhile

  produceList

- statement
  on "echo"   expression                -> Echo(expression)
  on "let"    identifier "=" expression -> Assign(target,new_value)

  on "for"
    identifier
    mustConsume( "=" )
    expression
    mustConsume( "to" )
    expression
    if (consume("step")) expression
    else                 createNull
    statements

    if (not consume("endfor")) mustConsume( "next" )
    produce For(control:String,first,last,step_size,statements:CmdList)

  elseOn "if"
    expression
    if (consume("then"))
      beginList
      statement
      endList
      createNull # else statements
    else
      statements
      if (consume("else"))
        statements
      else
        createNull # else statements
      endIf
      mustConsume( "endif" )
    endIf
    produce If(condition,statements:CmdList,else_statements:CmdList)

  elseOn "print"
    if (consume(EOL)) createNull
    else              expression
    produce Print(expression)

  elseOn "while"
    expression
    mustConsume( EOL )
    statements
    mustConsume( "endwhile" )
    produce While(condition,statements:CmdList)
  endOn

  expression
  on "="
    expression
    produce Assign(target,new_value)
  endOn

  # we'll leave the expression as a statement

- expression

+ logical_or   : Binary
  on "or" -> LogicalOr

+ logical_and  : Binary
  on "and" -> LogicalAnd

+ comparison : Binary
  on "==" -> CompareEQ
  on "!=" -> CompareNE
  on "<"  -> CompareLT
  on ">"  -> CompareGT
  on "<=" -> CompareLE
  on ">=" -> CompareGE

+ add_subtract : Binary
  on "+" -> Add
  on "-" -> Subtract

+ multiply_divide : Binary
  on "*"  -> Multiply
  on "/"  -> RealDivide
  on "//" -> IntegerDivide

+ pre_unary : PreUnary
  on "-" -> Negate

+ indexed_access
  access
  while (consume('['))
    expression
    mustConsume(']')
    create IndexedAccess(context,index)
  endWhile
  return

+ access

+ term
  on "atan", args      -> FnAtan( args:CmdList )
  on "atan2", args     -> FnAtan2( args:CmdList )
  on "cos", args       -> FnCos( args:CmdList )
  on "dim", args       -> FnDim( args:CmdList )
  on "exp", args       -> FnExp( args:CmdList )
  on "float", args     -> FnFloat( args:CmdList )
  on "input", args     -> FnInput( args:CmdList )
  on "int", args       -> FnInt( args:CmdList )
  on "join", args      -> FnJoin( args:CmdList )
  on "len", args       -> FnLen( args:CmdList )
  on "list", args      -> FnList( args:CmdList )
  on "max", args       -> FnMax( args:CmdList )
  on "min", args       -> FnMin( args:CmdList )
  on "randfloat", args -> FnRandFloat( args:CmdList )
  on "randint", args   -> FnRandInt( args:CmdList )
  on "sin", args       -> FnSin( args:CmdList )
  on "str", args       -> FnStr( args:CmdList )
  on "tan", args       -> FnTan( args:CmdList )

  on '(', expression, ')': return
  on IDENTIFIER -> Access( name=t.content:String )
  on INTEGER    -> LiteralInt32( value=t.content:String )
  on STRING     -> LiteralString( value=t.content:String )
  syntaxError

- identifier
  on IDENTIFIER -> Access( name=t.content:String )
  syntaxError "Identifier expected."

- args
  beginList

  mustConsume( '(' )
  consume_eols
  if (consume( ')' )) produceList  # empty list

  expression
  consume_eols

  while (consume(','))
    consume_eols
    expression
    consume_eols
  endWhile

  mustConsume( ')' )
  produceList

- consume_eols
  while (consume('\n')) noAction
 
