# WARNING: This file will be automatically regenerated by the Froley compiler.
# Any edits will be lost!

module BadBasic

class CmdFactory
  GLOBAL METHODS
    method create_cmd( constructor_index:Int32, args:CmdInitArgs )->Cmd
      local t = args.t
      which (constructor_index)
        case 0: return CmdList( t, args )
        case 1: return Echo( t, args[0] )
        case 2: return Assign( t, args[0], args[1] )
        case 3: return For( t, args.cmd_to<<String>>(0), args[1], args[2], args[3], args.cmd_as<<CmdList>>(4) )
        case 4: return If( t, args[0], args.cmd_as<<CmdList>>(1), args.cmd_as<<CmdList>>(2) )
        case 5: return Print( t, args[0] )
        case 6: return While( t, args[0], args.cmd_as<<CmdList>>(1) )
        case 7: return LogicalOr( t, args[0], args[1] )
        case 8: return LogicalAnd( t, args[0], args[1] )
        case 9: return CompareEQ( t, args[0], args[1] )
        case 10: return CompareNE( t, args[0], args[1] )
        case 11: return CompareLT( t, args[0], args[1] )
        case 12: return CompareGT( t, args[0], args[1] )
        case 13: return CompareLE( t, args[0], args[1] )
        case 14: return CompareGE( t, args[0], args[1] )
        case 15: return Add( t, args[0], args[1] )
        case 16: return Subtract( t, args[0], args[1] )
        case 17: return Multiply( t, args[0], args[1] )
        case 18: return RealDivide( t, args[0], args[1] )
        case 19: return IntegerDivide( t, args[0], args[1] )
        case 20: return Negate( t, args[0] )
        case 21: return IndexedAccess( t, args[0], args[1] )
        case 22: return FnAtan( t, args.cmd_as<<CmdList>>(0) )
        case 23: return FnAtan2( t, args.cmd_as<<CmdList>>(0) )
        case 24: return FnCos( t, args.cmd_as<<CmdList>>(0) )
        case 25: return FnDim( t, args.cmd_as<<CmdList>>(0) )
        case 26: return FnExp( t, args.cmd_as<<CmdList>>(0) )
        case 27: return FnFloat( t, args.cmd_as<<CmdList>>(0) )
        case 28: return FnInput( t, args.cmd_as<<CmdList>>(0) )
        case 29: return FnInt( t, args.cmd_as<<CmdList>>(0) )
        case 30: return FnJoin( t, args.cmd_as<<CmdList>>(0) )
        case 31: return FnLen( t, args.cmd_as<<CmdList>>(0) )
        case 32: return FnList( t, args.cmd_as<<CmdList>>(0) )
        case 33: return FnMax( t, args.cmd_as<<CmdList>>(0) )
        case 34: return FnMin( t, args.cmd_as<<CmdList>>(0) )
        case 35: return FnRandFloat( t, args.cmd_as<<CmdList>>(0) )
        case 36: return FnRandInt( t, args.cmd_as<<CmdList>>(0) )
        case 37: return FnSin( t, args.cmd_as<<CmdList>>(0) )
        case 38: return FnStr( t, args.cmd_as<<CmdList>>(0) )
        case 39: return FnTan( t, args.cmd_as<<CmdList>>(0) )
        case 40: return Access( t, t.content )
        case 41: return LiteralInt32( t, t.content )
        case 42: return LiteralString( t, t.content )
        others
          throw Error( "[INTERNAL] CmdFactory.create_cmd() constructor index out of bounds: " + constructor_index )
      endWhich
endClass
