[settings]
id_start    alpha '_'
id_continue alpha numeric '_'

[whitespace]
SPACE ' '
TAB   '\t'
EOL   '\n'
CR    '\r'

[tokens]
IDENTIFIER identifier [content]
INTEGER    integer    [content]

[keywords]

[symbols]
SYMBOL_ASTERISK             *
SYMBOL_CARET                ^
SYMBOL_CLOSE_PAREN          )
SYMBOL_EQUALS               =
SYMBOL_MINUS                -
SYMBOL_OPEN_PAREN           (
SYMBOL_PLUS                 +
SYMBOL_SLASH                /

[tokenizer]
<<tokenize>>
which (input)
  discardAny [whitespace]
endWhich

<whitespace_consumed>
markSourcePosition
if (not hasAnother) halt

scan_identifier

which (input)
  produceAny [symbols]
  case '#'
    # Single-line comment
    ch = read
    while (ch != '\n') ch = read
    discard
  others
    ch = peek
    if (ch is '0'..'9')
      scan_integer
      produce INTEGER
    endIf
endWhich

syntaxError

<scan_identifier>
ch = peek
if (ch is 'a'..'z' or ch is 'A'..'Z' or ch == '_')
  clear buffer
  while (ch is 'a'..'z' or ch is 'A'..'Z' or ch is '0'..'9' or ch == '_')
    ch = read
    collect ch
    ch = peek
  endWhile

  which (buffer)
    produceAny [keywords]
    others: produce IDENTIFIER
  endWhich
endIf
return

<scan_integer>
while (ch is '0'..'9' or ch == '_')
  ch = read
  if (ch != '_') collect ch
  if (not hasAnother) return
  ch = peek
endWhile
return


[parser]
- expression

+ assign : RightAssociativeBinaryParseRule
  on "=" -> Assign

+ add_subtract : BinaryParseRule
  on "+" -> Add
  on "-" -> Subtract

+ multiply_divide : BinaryParseRule
  on "*" -> Multiply
  on "/" -> Divide

+ power : BinaryParseRule
  on "^" -> Power

+ pre_unary : PreUnaryParseRule
  on "-" -> Negate

+ term
  on IDENTIFIER -> Access( name=t.content:String )
  on INTEGER    -> LiteralInt32( value=t.content:Int32 )
  on '(', expression, ')': return
  syntaxError

