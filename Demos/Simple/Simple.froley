[whitespace]
SPACE ' '
TAB   '\t'
EOL   '\n'

[tokens]
IDENTIFIER identifier
INTEGER    integer

[keywords]

[symbols]
SYMBOL_ASTERISK             *
SYMBOL_CARET                ^
SYMBOL_CLOSE_PAREN          )
SYMBOL_EQUALS               =
SYMBOL_MINUS                -
SYMBOL_OPEN_PAREN           (
SYMBOL_PLUS                 +
SYMBOL_SLASH                /

[tokenizer]
<<tokenize>>
which (input)
  discardAll [whitespace]
endWhich

<whitespace_consumed>
markSourcePosition
if (not hasAnother) halt

if (scanIdentifier)
  which (buffer)
    acceptAll [keywords]
    others: accept IDENTIFIER
  endWhich
endIf

which (input)
  acceptAll [symbols]
  case '#'
    # Single-line comment
    ch = read
    while (ch != '\n') ch = read
    discard
  others
    ch = peek
    if (ch is digit)
      scan_integer
      accept INTEGER
    endIf
endWhich

clear buffer
collect "Syntax error - unexpected '"
ch = peek
collect ch
collect "'."
error buffer

<scan_integer>
while (ch is digit or ch == '_')
  ch = read
  if (ch != '_') collect ch
  if (not hasAnother) return
  ch = peek
endWhile
return


[parser]
- expression

+ assign : RightAssociativeBinaryParseRule
  on "=" -> SimpleCmdAssign

+ add_subtract : BinaryParseRule
  on "+" -> SimpleCmdAdd
  on "-" -> SimpleCmdSubtract

+ multiply_divide : BinaryParseRule
  on "*" -> SimpleCmdMultiply
  on "/" -> SimpleCmdDivide

+ power : BinaryParseRule
  on "^" -> SimpleCmdPower

+ pre_unary : PreUnaryParseRule
  on "-" -> SimpleCmdNegate

+ term
  on IDENTIFIER -> SimpleCmdAccess       @name=content->String
  on INTEGER    -> SimpleCmdLiteralInt32 @value=content->Int32
  on "("
    expression
    mustConsume ")"
    return

