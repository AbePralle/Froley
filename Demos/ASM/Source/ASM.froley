[whitespace]
SPACE ' '
TAB   '\t'
CR    '\r'

[tokens]
EOL        eol
IDENTIFIER identifier  [content]
INTEGER    integer     [content]
STRING     string      [content]

[keywords]
HALT       halt
JMP        jmp          [idArg]
JEQ        jeq          [idArg]
JNE        jne          [idArg]
JGT        jgt          [idArg]
JGE        jge          [idArg]
JLT        jlt          [idArg]
JLE        jle          [idArg]
LITERAL_A  literal_a    [intArg]
LITERAL_B  literal_b    [intArg]
INPUT_A    input_a
INPUT_B    input_b
NEWLINE    newline
PRINT_A    print_a
PRINT_B    print_b
PRINT_TEXT print_text   [stringArg]
READ_A     read_a       [idArg]
READ_B     read_b       [idArg]
WRITE_A    write_a      [idArg]
WRITE_B    write_b      [idArg]
ADD        add
SUB        sub
MUL        mul
DIV        div
MOD        mod
CMP        cmp
SQRT       sqrt

[symbols]
COLON      ':'

[tokenizer]
- tokenize
which (input)
  discardAny [whitespace]
endWhich

+ whitespace_consumed
  markSourcePosition
  if (not hasAnother)
    create EOL
    halt
  endIf

  scan_identifier

  which (input)
    produceAny [symbols]
    case '\n': produce EOL
    case '#'
      # Single-line comment
      ch = read
      while (ch != '\n') ch = read
      discard
    case '"'
      # String
      scan_string
      produce STRING
    others
      ch = peek
      if (ch is '0'..'9')
        scan_integer
        produce INTEGER
      endIf
  endWhich

  syntaxError

+ scan_integer
  while (ch is '0'..'9' or ch == '_')
    ch = read
    if (ch != '_') collect ch
    if (not hasAnother) return
    ch = peek
  endWhile
  return

+ scan_string
  clear buffer
  ch = peek
  while (hasAnother and ch != '"' and ch != '\n')
    ch = read
    collect ch
    ch = peek
  endWhile
  if (not consume('"')) syntaxError "Closing \" expected."
  return

+ scan_identifier
  ch = peek
  if (ch is 'a'..'z' or ch is 'A'..'Z' or ch == '_')
    clear buffer
    while (ch is 'a'..'z' or ch is 'A'..'Z' or ch is '0'..'9' or ch == '_')
      ch = read
      collect ch
      ch = peek
    endWhile

    which (buffer)
      produceAny [keywords]
      others: produce IDENTIFIER
    endWhich
  endIf
  return

[parser]
- statements
  beginList
    while (consume(EOL)) noAction
    while (hasAnother)
      statement
      while (consume(EOL)) noAction
    endWhile
  createList Statements

- statement
  if (nextHasAttribute(idArg))
    cmd_with_id_arg
    mustConsume EOL
  elseIf (nextHasAttribute(intArg))
    cmd_with_int_arg
    mustConsume EOL
  elseIf (nextHasAttribute(stringArg))
    cmd_with_string_arg
    mustConsume EOL
  else
    cmd_with_no_arg_or_label
    mustConsume EOL
  endIf

- cmd_with_id_arg
  on "jmp",     identifier -> JMP(label)
  on "jeq",     identifier -> JEQ(label)
  on "jne",     identifier -> JNE(label)
  on "jgt",     identifier -> JGT(label)
  on "jge",     identifier -> JGE(label)
  on "jlt",     identifier -> JLT(label)
  on "jle",     identifier -> JLE(label)
  on "read_a",  identifier -> ReadA(label)
  on "read_b",  identifier -> ReadB(label)
  on "write_a", identifier -> WriteA(label)
  on "write_b", identifier -> WriteB(label)
  syntaxError

- cmd_with_int_arg
  on "literal_a"
    integer
    create LiteralA(name)
  elseOn "literal_b"
    integer
    create LiteralB(name)
  else
    syntaxError
  endOn
  return

- cmd_with_string_arg
  on "print_text", string -> PrintText(value)
  syntaxError

- cmd_with_no_arg_or_label
  on "halt"    -> Halt
  on "input_a" -> InputA
  on "input_b" -> InputB
  on "newline" -> Newline
  on "print_a" -> PrintA
  on "print_b" -> PrintB
  on "add"     -> Add
  on "sub"     -> Sub
  on "mul"     -> Mul
  on "div"     -> Div
  on "mod"     -> Mod
  on "cmp"     -> Cmp
  on "sqrt"    -> Sqrt
  on "identifier"
    mustConsume ':'
    create Label( name=t.content:String )
    return
  endOn
  syntaxError

- identifier
  on "identifier" -> Identifier( name=t.content:String )
  syntaxError

- string
  on "string" -> LiteralString( value=t.content:String )
  syntaxError

- integer
  on "integer" -> Integer( value=t.content:Int32 )
  syntaxError

