module Froley

Froley.code_generators//rogue = GenerateRogue()

# Simple.rogue
# SimpleCmd.rogue

class GenerateRogue : CodeGenerator
  PROPERTIES
    source_timestamp   : Real64
    generate_framework : Logical

  METHODS
    method usage_options->String[]
      return prior.usage_options.add(
        @|    --framework
         |      Creates the following framework files for language "XYZ" if they do not
         |      exist:
         |        - XYZError.rogue, XYZParser.rogue, XYZToken.rogue, XYZTokenizer.rogue
         |      Updates XYZCmd.rogue with starter class definitions of any command nodes
         |      that are not yet defined. Does not delete any code.
      )

    method add_option( name:String, value:String )
      which (name)
        case "framework"
          generate_framework = true
          if (value != "") throw FroleyError( "The --framework option should not have any arguments." )
        others
          prior.add_option( name, value )
      endWhich

    method output_filepath( filename:String, &do_not_overwrite, &for_reading )->String
      local filepath = select{options//output||""} + language + filename
      if (for_reading) return filepath

      if (File.timestamp(filepath) >= source_timestamp) return null

      if (File.exists(filepath))
        if (do_not_overwrite) return null
        println "Regenerating " + filepath
      else
        println "Creating " + filepath
      endIf

      return filepath

    method output_writer( filename:String, &do_not_overwrite )->PrintWriter
      local filepath = output_filepath( filename, &=do_not_overwrite )
      if (not filepath) return null

      local writer = PrintWriter( File.writer(filepath) )
      if (not do_not_overwrite)
        writer.println @|# WARNING: This file will be automatically regenerated by the Froley compiler.
                        |# Any edits will be lost!
        writer.println
      endIf
      return writer

    method process( info )
      language = info//language
      source_timestamp = File.timestamp( info//source_filepath )

      if (generate_framework)
        generate_Cmd
        generate_CmdInitArgs
        generate_Error
        generate_Parser
        generate_Token
        generate_Tokenizer
      endIf

      regenerate_CmdFactory
      regenerate_Code
      regenerate_ParserOpcode
      regenerate_TokenType
      regenerate_TokeninzerOpcode

    method generate( content:String, filename:String, &do_not_overwrite )
      local writer = output_writer( filename, &=do_not_overwrite )
      if (not writer) return
      writer.println( content.replacing("RogueFroley",language) )
      writer.close

    method generate_Cmd
      generate( RogueTemplate.cmd, "Cmd.rogue", &do_not_overwrite )

      # Update Cmd.rogue by adding new class skeletons
      local filepath = output_filepath( "Cmd.rogue", &for_reading )
      local content = File.load_as_string( filepath )
      local builder : StringBuilder
      forEach (cmd_type in info//cmd_types)
        local class_name = (cmd_type//name)
        local class_class_name = "class " + class_name
        if (not content.contains(class_class_name))
          if (not builder)
            println "Updating " + filepath
            builder = StringBuilder( content.count * 1.5 )
            builder.println( content )
          endIf
          local type = CmdTypeInfoType( cmd_type//type )
          print( "  " ).println( class_class_name )
          builder.println.print( class_class_name ).print( " : " ).print( language ).print( "Cmd" )
          which (type)
            case CmdTypeInfoType.PRE_UNARY:  builder.println "Unary"
            case CmdTypeInfoType.POST_UNARY: builder.println "PostUnary"
            case CmdTypeInfoType.BINARY:     builder.println "Binary"
            case CmdTypeInfoType.STATEMENTS: builder.println "Statements"
            case CmdTypeInfoType.ARGS:       builder.println "Args"
            others:                          builder.println
          endWhich
          builder.println "  METHODS"
          which (type)
            case CmdTypeInfoType.PRE_UNARY, CmdTypeInfoType.POST_UNARY, CmdTypeInfoType.BINARY
              builder.println "    method op->String"
              builder.println '      return "$"' (cmd_type//symbol->String.to_escaped_ascii)
            others
              builder.println "    method to->String"
              builder.print  ("      return \"").print( class_name ).println( "\"" )
          endWhich
          builder.println "endClass"
        endIf
      endForEach
      if (builder)
        File.save( filepath, builder->String )
      endIf

    method generate_CmdInitArgs
      generate( RogueTemplate.cmd_init_args, "CmdInitArgs.rogue", &do_not_overwrite )

    method generate_Error
      generate( RogueTemplate.error, "Error.rogue", &do_not_overwrite )

    method generate_Parser
      generate( RogueTemplate.parser, "Parser.rogue", &do_not_overwrite )

    method generate_Token
      generate( RogueTemplate.token, "Token.rogue", &do_not_overwrite )

    method generate_Tokenizer
      generate( RogueTemplate.tokenizer, "Tokenizer.rogue", &do_not_overwrite )

    method regenerate_CmdFactory
      local writer = output_writer( "CmdFactory.rogue" )
      if (not writer) return

      writer.print  ( "class ").print( language ).println( "CmdFactory" )
      writer.println( "  GLOBAL METHODS" )
      writer.print  ( "    method create_cmd( index:Int32, t:" ).print( language ).print( "Token, args:" ).print( language ).print( "CmdInitArgs )->" ) ...
        .print( language ).println( "Cmd" )
      writer.println("      which (index)")
      forEach (cmd_type in info//cmd_types)
        writer.print  ( "        case " ).print( cmd_type//index ).print( ": " )
        writer.print  ( "return " ).print( cmd_type//name ).println( "( t, args )" )
      endForEach
      writer.println @|        others
      writer.print  ( "          throw " ).print( language ).println( ''Error( "[INTERNAL] CmdFactory.create_cmd() index out of bounds: " + index )'' )
      writer.println @|      endWhich
                      |endClass
      writer.close

    method regenerate_Code
      local writer = output_writer( "Code.rogue" )
      if (not writer) return

      writer.print  ( "class " ).print( language ).println( "Code" )
      writer.println @|  GLOBAL PROPERTIES
                      |    tokenizer_code =
      writer.print    "      \""
      writer.print   info//tokenizer_code->String.word_wrap(64).join( "\" ...\n      \"" )
      writer.println "\""
      writer.println
      writer.println

      writer.println "    parser_code ="
      writer.print   "      \""
      writer.print   info//parser_code->String.word_wrap(64).join( "\" ...\n      \"" )
      writer.println "\""
      writer.println
      writer.println

      writer.println "endClass"
      writer.close

    method regenerate_ParserOpcode
      local writer = output_writer( "ParserOpcode.rogue" )
      if (not writer) return

      local defs = Int32DefsBuilder( &prefix="  " )
      forEach (parser_opcode in info//parser_opcodes)
        defs.add( parser_opcode//name, parser_opcode//value )
      endForEach

      writer.print  ( "enum ").print( language ).print( "ParserOpcode" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close

    method regenerate_TokenType
      local writer = output_writer( "TokenType.rogue" )
      if (not writer) return

      local defs = Int32DefsBuilder( &prefix="  " )
      forEach (token_type in info//token_types)
        defs.add( '$("$")' (token_type//name,token_type//symbol->String.to_escaped_ascii("\"")), token_type//type )
      endForEach

      writer.print  ( "enum ").print( language ).print( "TokenType( symbol:String )" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close

    method regenerate_TokeninzerOpcode
      local writer = output_writer( "TokenizerOpcode.rogue" )
      if (not writer) return

      local defs = Int32DefsBuilder( &prefix="  " )
      forEach (tokenizer_opcode in info//tokenizer_opcodes)
        defs.add( tokenizer_opcode//name, tokenizer_opcode//value )
      endForEach

      writer.print  ( "enum ").print( language ).print( "TokenizerOpcode" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close
endClass
