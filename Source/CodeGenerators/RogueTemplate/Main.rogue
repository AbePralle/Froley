augment RogueTemplate
  PROPERTIES
    main_with_tokenizer_and_parser =
      @|module FroleyLanguage
       |
       |$include "Parser.rogue"
       |
       |FroleyLanguage()
       |
       |class FroleyLanguage
       |  METHODS
       |    method init
       |      # Parse input or file by repeatedly calling first method defined in parser.
       |      local parser = Parser()
       |      if (System.command_line_arguments.count)
       |        try
       |          local args = System.command_line_arguments.join( " " )
       |          if (File.exists(args))
       |            # Parse contents of file
       |            parser.open( File(args) )
       |          else
       |            parser.open( "[Command Line]", args )
       |          endIf
       |
       |          if (not parser.methods.is_empty)
       |            while (parser.has_another)
       |              local node = parser.parse( parser.methods[0] )
       |              println node
       |            endWhile
       |          endIf
       |        catch (err:Error)
       |          Console.error.println err
       |        endTry
       |
       |      else
       |        # Interactive mode
       |        loop
       |          try
       |            local input = Console.input( "> " )
       |            parser.open( "[Command Line]", input )
       |            if (not parser.methods.is_empty)
       |              while (parser.has_another)
       |                local node = parser.parse( parser.methods[0] )
       |                println node
       |              endWhile
       |            endIf
       |          catch (err:Error)
       |            Console.error.println err
       |          endTry
       |        endLoop
       |      endIf
       |endClass
       |

    main_with_tokenizer_only =
      @|module FroleyLanguage
       |
       |$include "Tokenizer.rogue"
       |
       |FroleyLanguage()
       |
       |class FroleyLanguage
       |  METHODS
       |    method init
       |      # Parse input or file
       |      local tokenizer = Tokenizer()
       |      if (System.command_line_arguments.count)
       |        try
       |          local args = System.command_line_arguments.join( " " )
       |          if (File.exists(args))
       |            display( tokenizer.tokenize(File(args)) )
       |          else
       |            display( tokenizer.tokenize("[Command Line]", args) )
       |          endIf
       |        catch (err:Error)
       |          Console.error.println err
       |        endTry
       |
       |      else
       |        # Interactive mode
       |        loop
       |          try
       |            local input = Console.input( "> " )
       |            display( tokenizer.tokenize("[Command Line]", input) )
       |          catch (err:Error)
       |            Console.error.println err
       |          endTry
       |        endLoop
       |      endIf
       |
       |    method display( tokens:Token[] )
       |      println (forEach in tokens)
       |endClass
       |
endAugment

