$includeFolder "JavaTemplate"

module Froley

Froley.code_generators//java = GenerateJava()

class GenerateJava : CodeGenerator
  PROPERTIES
    package_name         : String
    should_generate_main : Logical

  METHODS
    method usage_options->String[]
      return prior.usage_options.add(
        @|    --main
         |      Creates a main file (if it does not yet exist) to test out the parser
         |      and tokenizer.
      ).add(
        @|    --package=<package-name>
         |      Specifies the package name that will be used for all generated Java files.
         |      An appropriate folder heirarchy will be created in the default or
         |      specified --output folder if needed.
      )

    method add_option( name:String, value:String )
      which (name)
        case "main"
          should_generate_main = true
          if (value != "") throw FroleyError( "The --main option should not have any arguments." )
        case "package"
          package_name = value
        others
          prior.add_option( name, value )
      endWhich

    method output_filepath( filename:String, &do_not_overwrite, &for_reading )->String
      local filepath = select{output||""} + filename
      if (for_reading) return filepath

      if (File.timestamp(filepath) >= source_timestamp) return null

      if (File.exists(filepath))
        if (do_not_overwrite) return null
        println "Regenerating " + filepath
      else
        println "Creating " + filepath
      endIf

      return filepath

    method output_writer( filename:String, &do_not_overwrite )->PrintWriter
      local filepath = output_filepath( filename, &=do_not_overwrite )
      if (not filepath) return null

      local writer = PrintWriter( File.writer(filepath) )
      if (not do_not_overwrite)
        writer.println @|# WARNING: This file will be automatically regenerated by the Froley compiler.
                        |# Any edits will be lost!
        writer.println
      endIf
      return writer

    method process( info )
      configure
      if (package_name) output += File.ensure_ends_with_separator( package_name.split('.').join("/") )
      output = File.ensure_ends_with_separator( File.absolute_filepath( output ) )
      File.create_folder( output )

      generate_Error
      generate_Token
      #generate_Tokenizer

      #regenerate_Code
      #regenerate_TokenType
      #regenerate_TokeninzerOpcode

      if (has_parser)
        generate_Cmd
        generate_CmdInitArgs
        #generate_Parser

        #regenerate_CmdFactory
        #regenerate_ParserOpcode
      endIf

      #if (should_generate_main) generate_main

    method generate( content:String, filename:String, content_filter=null:Function(String)->String, &do_not_overwrite )
      local writer = output_writer( filename, &=do_not_overwrite )
      if (not writer) return
      if (content_filter) content = content_filter( content )
      if (package_name)
        content = content.replacing( "<rogue.froley.package>", "package $;"(package_name) );
      else
        content = content.replacing( "<rogue.froley.package>", "" );
      endIf
      content = content.replacing( "RogueFroley", language )
      writer.println( content )
      writer.close

    method generate_Cmd
      generate( JavaTemplate.cmd, "Cmd.java", &do_not_overwrite )

      # Update Cmd.java by adding new class skeletons
      local filepath = output_filepath( "Cmd.java", &for_reading )
      local content = File.load_as_string( filepath )

      local closing_curly_index = content.locate_last( '}' )
      if (closing_curly_index.exists)
        content = content.substring( 0, closing_curly_index.value-1 )
      endIf

      local builder : StringBuilder
      forEach (cmd_type in info//cmd_types)
        local base_name = (cmd_type//name)->String
        local class_name = base_name
        local class_class_name = "public class " + class_name
        if (not content.contains(class_class_name))
          if (not builder)
            println "Updating " + filepath
            builder = StringBuilder( content.count * 1.5 )
            builder.println( content )
          endIf
          local type = ParseRuleType( cmd_type//type )
          print( "  " ).println( class_class_name )
          builder.println.print( class_class_name )
          builder.print( " extends Cmd" )
          which (type)
            case ParseRuleType.PRE_UNARY:  builder.println "Unary"
            case ParseRuleType.POST_UNARY: builder.println "PostUnary"
            case ParseRuleType.BINARY:     builder.println "Binary"
            case ParseRuleType.STATEMENTS: builder.println "Statements"
            case ParseRuleType.LIST:       builder.println "List"
            others
              builder.println
          endWhich
          builder.println( '{' )

          local cmd_properties = cmd_type//properties

          builder.println "  // METHODS"
          if (cmd_properties.count)
            # Default constructor
            builder.print( "  public " ).print( class_name ).println( "()" )
            builder.println "  {"
            builder.println "  }"
            builder.println

            # Property-setting constructor
            builder.print( "  public " ).print( class_name )
            builder.print( "( Token t" )
            forEach (p in cmd_properties)
              builder.print( ", " )
              if (p//value.count)
                builder.print( p//type )
              else
                builder.print( p//type )
              endIf
              builder.print( ' ' )
              builder.print( p//name )
            endForEach
            builder.println( " )" )
            builder.println "  {"
            builder.println "    this.t = t;"
            forEach (p in cmd_properties)
              builder.print( "    this." ).print( p//name ).print( " = " ).print( p//name ).println( ';' )
            endForEach
            builder.println "  }"
            builder.println

            # Systematic initializer
            builder.print(   "  public " ).print( class_name ).println( " init( Token t, CmdInitArgs args )" )
            builder.println( "  {" )
            builder.print(   "    args.requireCount( " ).print( cmd_type//properties.count($//value=="") ).println( " );" )
            builder.println(   "    this.t = t;" )
            local index = 0
            forEach (p in cmd_properties)
              builder.print( "    " )
              builder.print( p//name )
              builder.print( " = " )
              if (p//value != "")
                # name = t.content;
                # name = StringUtility.stringToInt32( t.content );
                if (p//type == "String")
                  builder.print( p//value ).println( ';' )
                else
                  builder.print( "StringUtility.stringTo" ).print( p//type ).print( "( " ).print( p//value ).println( " );" )
                endIf
              else
                if (p//type != "Cmd") builder.print( "(" ).print( p//type )
                builder.print( "args.get( " ).print( index ).print( " );" )
                ++index
              endIf
            endForEach
            builder.println( "  }" )
            builder.println
          endIf

          local escaped_symbol = cmd_type//symbol->String.to_escaped_ascii("\"")
          which (type)
            case ParseRuleType.PRE_UNARY, ParseRuleType.POST_UNARY, ParseRuleType.BINARY
              builder.println "  public String op()"
              builder.println "  {"
              builder.println '    return "$";' (escaped_symbol)
              builder.println "  }"
            others
              builder.println "  public void write( StringBuilder builder )"
              builder.println "  {"
              builder.print  ("    builder.print( " )
              which (cmd_properties.count)
                case 0
                  builder.print( '"' ).print( escaped_symbol ).println( "\" );" )
                case 1
                  local p = cmd_properties[ 0 ]
                  if (p//value != "")
                    if (p//type != "String") builder.print( '""+' )
                    builder.print( p//name ).print( " )" )
                  else
                    builder.print( '"' )
                    builder.print( escaped_symbol )
                    builder.print( '(' )
                    builder.print( p//name )
                    builder.print( ')' )
                    builder.print( '"' )
                  endIf
                  builder.println ';'
                others
                  builder.print( escaped_symbol ).print( '"("+' )
                  local names = String[]
                  names.add( (forEach in cmd_properties)//name )
                  builder.print( names.join("+") )
                  builder.print( '+")"' )
                  builder.println( " );" )
              endWhich
              builder.println "  }"
          endWhich
          builder.println "}"
        endIf
      endForEach
      if (builder)
        File.save( filepath, builder->String )
      endIf

    method generate_CmdInitArgs
      generate( JavaTemplate.cmd_init_args, "CmdInitArgs.java", &do_not_overwrite )

    method generate_Error
      generate( JavaTemplate.error, "Error.java", &do_not_overwrite )

      #{
    method generate_main
      generate( JavaTemplate.main, language+".java", &do_not_overwrite )

    method generate_Parser
      local fn = function( content:String )->String
        local def = Froley.token_defs_by_symbol[ "\n" ]
        if (def) content = content.replacing( "<handle_consume_eols>", "while (TokenType(next_token_type) == TokenType.$) read"(def.name) )
        return content
      endFunction
      generate( JavaTemplate.parser, "Parser.java", fn, &do_not_overwrite )
      }#

    method generate_Token
      generate( JavaTemplate.token, "Token.java", &do_not_overwrite )

      #{
    method generate_Tokenizer
      local fn = function( content:String )->String with (info)
        local def = Froley.token_defs_by_symbol[ "\n" ]
        content = content.replacing( "<id_start>", info//id_characters//start->String.to_escaped_ascii("\"") )
        content = content.replacing( "<id_continue>", info//id_characters//continue->String.to_escaped_ascii("\"") )
        return content
      endFunction
      generate( JavaTemplate.tokenizer, "Tokenizer.java", fn, &do_not_overwrite )

    method regenerate_CmdFactory
      local writer = output_writer( "CmdFactory.java" )
      if (not writer) return

      writer.print  ("module ").println( language )
      writer.println
      writer.println( "class CmdFactory" )
      writer.println( "  GLOBAL METHODS" )
      writer.println( "    method create_cmd( index:Int32, t:Token, args:CmdInitArgs )->Cmd" )
      writer.println("      which (index)")
      forEach (cmd_type in info//cmd_types)
        writer.print  ( "        case " ).print( cmd_type//index ).print( ": " )
        writer.print  ( "return " ).print( cmd_type//name ).println( "( t, args )" )
      endForEach
      writer.println @|        others
      writer.println(''          throw Error( "[INTERNAL] CmdFactory.create_cmd() index out of bounds: " + index )'' )
      writer.println @|      endWhich
                      |endClass
      writer.close

    method regenerate_Code
      local writer = output_writer( "Code.java" )
      if (not writer) return

      writer.print  ("module ").println( language )
      writer.println
      writer.println( "class Code [singleton]" )
      writer.println @|  PROPERTIES
                      |    tokenizer_code_base64 =
      writer.print    "      \""
      writer.print   info//tokenizer_code->String.word_wrap(64).join( "\" ...\n      \"" )
      writer.println "\""
      writer.println

      writer.println "    parser_code_base64 ="
      writer.print   "      \""
      writer.print   info//parser_code->String.word_wrap(64).join( "\" ...\n      \"" )
      writer.println "\""
      writer.println

      writer.println @|  METHODS
                      |    method parser_code->Byte[]
                      |      return parser_code_base64.decode_base64
                      |
                      |    method tokenizer_code->Byte[]
                      |      return tokenizer_code_base64.decode_base64
                      |
                      |endClass
      writer.close

    method regenerate_ParserOpcode
      local writer = output_writer( "ParserOpcode.java" )
      if (not writer) return

      local defs = Int32DefsBuilder( &prefix="  " )
      forEach (parser_opcode in info//parser_opcodes)
        defs.add( parser_opcode//name, parser_opcode//value )
      endForEach

      writer.println( "enum ParserOpcode" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close

    method regenerate_TokenType
      local writer = output_writer( "TokenType.java" )
      if (not writer) return

      local attributes_by_value = Table<<Int32,String>>()
      local defs = Int32DefsBuilder( &prefix="  " )
      defs.add( "NONE", 0 )
      forEach (attribute in info//token_attributes)
        local name = attribute//name->String.to_uppercase
        defs.add( name, attribute//value )
        attributes_by_value[ attribute//value ] = name
      endForEach

      writer.println( "enum TokenTypeAttribute" )
      defs.print( writer )
      writer.println @|endEnum
      writer.println.println

      defs = Int32DefsBuilder( &prefix="  " )
      forEach (token_type in info//token_types)
        local def = '$("$"' (token_type//name,token_type//symbol->String.to_escaped_ascii("\""))
        local attributes = token_type//attributes->Int32
        if (attributes)
          def += ",TokenTypeAttribute"
          local name = attributes_by_value[ attributes ]
          if (name) def += "." + name
          else      def += "($)" (attributes)
        endIf
        def += ")"
        defs.add( def, token_type//type )
      endForEach

      writer.println( "enum TokenType( symbol:String, attributes=TokenTypeAttribute.NONE:TokenTypeAttribute )" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close

    method regenerate_TokeninzerOpcode
      local writer = output_writer( "TokenizerOpcode.java" )
      if (not writer) return

      local defs = Int32DefsBuilder( &prefix="  " )
      forEach (tokenizer_opcode in info//tokenizer_opcodes)
        defs.add( tokenizer_opcode//name, tokenizer_opcode//value )
      endForEach

      writer.println( "enum TokenizerOpcode" )
      defs.print( writer )
      writer.println @|endEnum
      writer.close
      }#
endClass
