augment JavaTemplate
  PROPERTIES
    main_with_tokenizer_and_parser =
      @|<froley.package>
       |
       |import java.io.File;
       |import java.util.Scanner;
       |
       |public class FroleyLanguage
       |{
       |  // GLOBAL METHODS
       |  static public void main( String[] args )
       |  {
       |    new FroleyLanguage( args );
       |  }
       |
       |  // METHODS
       |  public FroleyLanguage( String[] args )
       |  {
       |    // Parse input or file by repeatedly calling first method defined in parser.
       |    Parser parser = new Parser();
       |    if (args.length > 0)
       |    {
       |      try
       |      {
       |        String commandLine = args[0];
       |        for (int i=1; i<args.length; ++i) commandLine += " "+ args[i];
       |        if (new File(commandLine).exists())
       |        {
       |          parser.open( new File(commandLine) );
       |        }
       |        else
       |        {
       |          parser.open( "[Command Line]", commandLine );
       |        }
       |
       |        if ( !parser.methodAddresses.isEmpty() )
       |        {
       |          while (parser.hasAnother())
       |          {
       |            Node node = parser.parse( parser.firstMethodAddress );
       |            System.out.println( node );
       |          }
       |        }
       |      }
       |      catch (Error err)
       |      {
       |        System.err.println( err );
       |      }
       |    }
       |    else
       |    {
       |      // Interactive mode
       |      Scanner scanner = new Scanner( System.in );
       |      for (;;)
       |      {
       |        try
       |        {
       |          System.out.print( "> " );
       |          System.out.flush();
       |          String input = scanner.nextLine();
       |          parser.open( "[Command Line]", input );
       |          if ( !parser.methodAddresses.isEmpty() )
       |          {
       |            while (parser.hasAnother())
       |            {
       |              Node node = parser.parse( parser.firstMethodAddress );
       |              System.out.println( node );
       |            }
       |          }
       |        }
       |        catch (Error err)
       |        {
       |          System.err.println( err );
       |        }
       |      }
       |    }
       |  }
       |}
       |

    main_with_tokenizer_only =
      @|<froley.package>
       |
       |import java.io.File;
       |import java.util.Scanner;
       |
       |public class FroleyLanguage
       |{
       |  // GLOBAL METHODS
       |  static public void main( String[] args )
       |  {
       |    new FroleyLanguage( args );
       |  }
       |
       |  // METHODS
       |  public FroleyLanguage( String[] args )
       |  {
       |    Tokenizer tokenizer = new Tokenizer();
       |    if (args.length > 0)
       |    {
       |      try
       |      {
       |        Token[] tokens = null;
       |        String commandLine = args[0];
       |        for (int i=1; i<args.length; ++i) commandLine += " "+ args[i];
       |        if (new File(commandLine).exists())
       |        {
       |          tokens = tokenizer.tokenize( new File(commandLine) );
       |        }
       |        else
       |        {
       |          tokens = tokenizer.tokenize( "[Command Line]", commandLine );
       |        }
       |        for (Token t : tokens) System.out.println( t );
       |      }
       |      catch (Error err)
       |      {
       |        System.err.println( err );
       |      }
       |    }
       |    else
       |    {
       |      // Interactive mode
       |      Scanner scanner = new Scanner( System.in );
       |      for (;;)
       |      {
       |        try
       |        {
       |          System.out.print( "> " );
       |          System.out.flush();
       |          String input = scanner.nextLine();
       |          Token[] tokens = tokenizer.tokenize( "[Command Line]", input );
       |          for (Token t : tokens) System.out.println( t );
       |        }
       |        catch (Error err)
       |        {
       |          System.err.println( err );
       |        }
       |      }
       |    }
       |  }
       |}
       |
endAugment
