augment JavaTemplate
  PROPERTIES
    node =
      @|<froley.package>
       |
       |import java.util.ArrayList;
       |
       |public class Node
       |{
       |  // PROPERTIES
       |  public Token t;
       |
       |  // METHODS
       |  public Node init( Token t, NodeInitArgs args )
       |  {
       |    this.t = t;
       |    args.requireCount( 0 );
       |    return this;
       |  }
       |
       |  public Node dispatch( Visitor visitor )
       |  {
       |    return visitor.visit( this );
       |  }
       |
       |  public String toString()
       |  {
       |    StringBuilder result = new StringBuilder();
       |    write( result );
       |    return result.toString();
       |  }
       |
       |  public void write( StringBuilder builder )
       |  {
       |    String typeName = getClass().getName();
       |    int i = typeName.lastIndexOf( '$' );
       |    if (i == -1) i = typeName.lastIndexOf( "Node" );
       |    if (i != -1 && i == typeName.length()-1) i = -1;
       |    builder.print( (i==-1) ? typeName : typeName.substring(i+3) );
       |  }
       |
       |  public void write( Node node, StringBuilder builder )
       |  {
       |    if (node != null) node.write( builder );
       |    else             builder.print( "null" );
       |  }
       |
       |  static public class NodeList extends Node
       |  {
       |    //PROPERTIES
       |    public ArrayList<Node> list;
       |
       |    //METHODS
       |    public NodeList( Token t, NodeInitArgs args )
       |    {
       |      this.t = t;
       |      list = new ArrayList<Node>( args.size() );
       |      for (int i=0; i<args.size(); ++i)
       |      {
       |        list.add( args.get(i) );
       |      }
       |    }
       |
       |    public int count()
       |    {
       |      return list.size();
       |    }
       |
       |    public NodeList dispatch( Visitor visitor )
       |    {
       |      return visitor.visit( this );
       |    }
       |
       |    public Node first()
       |    {
       |      return list.get( 0 );
       |    }
       |
       |    public Node get( int index )
       |    {
       |      return list.get( index );
       |    }
       |
       |    public Node last()
       |    {
       |      return list.get( list.size()-1 );
       |    }
       |
       |    public void write( StringBuilder builder )
       |    {
       |      builder.print( '[' );
       |      for (int i=0; i<list.size(); ++i)
       |      {
       |        if (i > 0) builder.print( ',' );
       |        Node node = list.get( i );
       |        write( node, builder );
       |      }
       |      builder.print( ']' );
       |    }
       |  }
       |
       |  static public class Statements extends NodeList
       |  {
       |    public Statements( Token t, NodeInitArgs args )
       |    {
       |      super( t, args );
       |    }
       |
       |    public Statements dispatch( Visitor visitor )
       |    {
       |      return visitor.visit( this );
       |    }
       |
       |    public void write( StringBuilder builder )
       |    {
       |      for (int i=0; i<list.size(); ++i)
       |      {
       |        Node statement = list.get( i );
       |        write( statement, builder );
       |        builder.print( '\n' );
       |      }
       |    }
       |  }
       |
       |  static public class Unary extends Node
       |  {
       |    // PROPERTIES
       |    public Node operand;
       |
       |    // METHODS
       |    public Node init( Token t, NodeInitArgs args )
       |    {
       |      this.t = t;
       |      args.requireCount( 1 );
       |      return this;
       |    }
       |
       |    public Unary dispatch( Visitor visitor )
       |    {
       |      return visitor.visit( this );
       |    }
       |
       |    public String op()
       |    {
       |      throw new UnsupportedOperationException();
       |    }
       |
       |    public void write( StringBuilder builder )
       |    {
       |      builder.print( '(' ).print( op() );
       |      write( operand, builder );
       |      builder.print( ')' );
       |    }
       |  }
       |
       |  static public class PostUnary extends Unary
       |  {
       |    // METHODS
       |    public PostUnary dispatch( Visitor visitor )
       |    {
       |      return visitor.visit( this );
       |    }
       |
       |    public void write( StringBuilder builder )
       |    {
       |      builder.print( '(' );
       |      write( operand, builder );
       |      builder.print( op() ).print( ')' );
       |    }
       |  }
       |
       |  static public class Binary extends Node
       |  {
       |    // PROPERTIES
       |    public Node left;
       |    public Node right;
       |
       |    // METHODS
       |    public Node init( Token t, NodeInitArgs args )
       |    {
       |      this.t = t;
       |      args.requireCount( 2 );
       |      left = args.get( 0 );
       |      right = args.get( 1 );
       |      return this;
       |    }
       |
       |    public Binary dispatch( Visitor visitor )
       |    {
       |      return visitor.visit( this );
       |    }
       |
       |    public String op()
       |    {
       |      throw new UnsupportedOperationException();
       |    }
       |
       |    public void write( StringBuilder builder )
       |    {
       |      builder.print( '(' );
       |      write( left, builder );
       |      builder.print( ' ' ).print( op() ).print( ' ' );
       |      write( right, builder );
       |      builder.print( ')' );
       |    }
       |  }
       |}

endAugment

