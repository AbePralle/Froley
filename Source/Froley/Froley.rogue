module Froley
  uses ParseKit<<Froley>>

$include "Assembler.rogue"
$include "Cmd.rogue"
$include "FroleyError.rogue"
$include "FroleyParser.rogue"
$include "FroleyTokenizer.rogue"
$include "Opcode.rogue"
$include "Token.rogue"
$include "TokenType.rogue"
$include "VM.rogue"

Launcher( System.command_line_arguments )

class Launcher
  METHODS
    method init( args:String[] )
      local options = String[]
      local targets = String[]
      forEach (arg in args)
        if (arg.begins_with("--")) options.add( arg )
        else                       targets.add( arg )
      endForEach

      init( options, targets )

    method init( options:String[], targets:String[] )
      try
        forEach (option in options)
          which (option.before_first('='))
            others
              throw FroleyError( "Unrecognized option: " + option )
          endWhich
        endForEach

        forEach (target in targets)
          Froley( File(target) )
        endForEach

      catch (error:FroleyError)
        println error
      endTry
endClass

class Froley
  METHODS
    method init( file:File )
      local source = file.load_as_string
      parse( file.filepath, source )

    method parse( filepath:String, source:String )
      local statements = CmdStatements()
      local parser = FroleyParser()
      parser.set_source( filepath, source )
      parser.consume_eols
      parser.parse_multi_line_statements( statements )

      statements.resolve

      local bytes = Assembler().assemble( statements )
      local vm = VM( bytes )
      vm.tokenize( File("Test2.txt") )

endClass

