module Froley

enum Opcode( size=1:Int32 )
  HALT                  # Tokenization complete; VM.tokenize() returns
  RETURN                # ip = stack.remove_last
  ERROR                 # Throws error using message in BUFFER
  ACCEPT_X(2)           # Invokes VM callback accept(type,BUFFER), where 'type' is operand, then clears BUFFER & jumps to IP 0
  DISCARD               # Clears BUFFER & jumps to IP 0
  JUMP(2)               # Jumps to IP specified by operand
  JUMP_EQ               #
  JUMP_NE               #
  JUMP_LT               #
  JUMP_LE               #
  JUMP_GT               #
  JUMP_GE               #
  CALL(2)               #
  SCAN_TABLE            #
  MARK_SOURCE_POS       #
  HAS_ANOTHER           #
  READ                  #
  READ_NUMBER(2)          #
  PEEK_N(2)             #
  CONSUME               #
  CONSUME_CHARACTER(2)  #
  CONSUME_STRING(2)     #
  CLEAR_BUFFER          #
  COLLECT_CH            #
  COLLECT_STRING(2)     #
  PRINT_CH              #
  PRINT_COUNT           #
  PRINT_CHARACTER(2)    #
  PRINT_STRING(2)       #
  SET_CH_INT32(2)       #
  COMPARE_CH_INT32
  COMPARE_COUNT_INT32   #
  TEST_CH
  TEST_COUNT
  PUSH_CH
  POP_CH
  SET_C(2)              #
  MOVE_CH_TO_C           #
  MOVE_C_TO_CH           #
  ADD_CH_INT32(2)        #
  ADD_C_INT32(2)        #
  SUB_CH_INT32(2)        #
  SUB_C_INT32(2)        #
endEnum

