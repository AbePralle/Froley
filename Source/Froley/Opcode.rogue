module Froley

enum Opcode( size=1:Int32 )
  HALT                  # Tokenization complete; VM.tokenize() returns
  RETURN                # ip = stack.remove_last
  ERROR                 # Throws error using message in BUFFER
  ACCEPT_X(2)           # Invokes VM callback accept(type,BUFFER), where 'type' is operand, then clears BUFFER & jumps to IP 0
  DISCARD               # Clears BUFFER & jumps to IP 0
  JUMP(2)               # Jumps to IP specified by operand
  JUMP_EQ(2)            # Jumps to specified IP if Z=1
  JUMP_NE(2)            # Jumps to specified IP if Z=0
  JUMP_LT(2)            # Jumps to specified IP if Z=0 and N=1
  JUMP_LE(2)            # Jumps to specified IP if Z=1 or  N=1
  JUMP_GT(2)            # Jumps to specified IP if Z=0 and N=0
  JUMP_GE(2)            # Jumps to specified IP if Z=1 or  N=0
  CALL(2)               # stack.add(ip); ip = opcode
  SCAN_TABLE            # large, variable size operand data
  MARK_SOURCE_POS       # Notes the current source line and column to be used with the next token
  HAS_ANOTHER           # Z=1 if scanner has another; else Z=0
  READ                  # A = scanner.read
  PEEK_N(2)             # A = scanner.peek(lookahead=opcode)
  CONSUME               # A = scanner.read; BUFFER.print(A)
  CONSUME_CHARACTER(2)  # if (scanner.consume(ch=opcode:Character)){BUFFER.print(ch); Z=1} else {Z=0}
  CONSUME_STRING(2)     # if (scanner.consume(strings[index=opcode])){BUFFER.print(st);Z=1} else {Z=0}
  CLEAR_BUFFER          # BUFFER.clear
  WRITE_A(2)            # BUFFER.print( A->Character )
  WRITE_STRING(2)       # BUFFER.print( strings[index=opcode] )
  PRINT_A(2)            # print( A->Character )
  PRINT_STRING(2)       # print( strings[index=opcode] )
  SET_A(2)              # A = operand:Int32
  TEST_A                # N and Z flags updated
  PUSH_A
  POP_A
  SET_C(2)              # C = operand:Int32
  MOVE_A_TO_C           # C = A
  MOVE_C_TO_A           # A = C
  ADD_A_INT32(2)        # A += operand:Int32
  ADD_C_INT32(2)        # C += operand:Int32
  SUB_A_INT32(2)        # A -= operand:Int32
  SUB_C_INT32(2)        # C -= operand:Int32
endEnum

