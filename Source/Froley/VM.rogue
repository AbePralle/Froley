module Froley
  uses ParseKit<<Froley>>

class VM
  DEFINITIONS
    VERSION     = 1
    MIN_VERSION = 1

  PROPERTIES
    code    = Int32[]
    stack   = Int32[]
    strings = String[]
    ch      : Int32
    count   : Int32
    result  : Int32

    filepath : String
    scanner  : Scanner

  METHODS
    method init( data:Byte[] )
      load( data )

    method execute
      local ip = 0
      loop
        local opcode = code[ ip ]
        ++ip
        #trace Opcode(opcode)
        which (opcode)
          case Opcode.HALT
            return
          case Opcode.RETURN
            if (stack.is_empty) throw FroleyError( "[Compiled Code]", "'return' on empty stack." )
            ip = stack.remove_last
            nextIteration
          #case Opcode.ERROR
          #case Opcode.ACCEPT_X
          #case Opcode.DISCARD
          case Opcode.JUMP
            ip = code[ ip ]
            nextIteration
          case Opcode.JUMP_EQ
            if (result == 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_NE
            if (result != 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_LT
            if (result < 0) ip = code[ ip ]
            else            ++ip
            nextIteration
          case Opcode.JUMP_LE
            if (result <= 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_GT
            if (result > 0) ip = code[ ip ]
            else            ++ip
            nextIteration
          case Opcode.JUMP_GE
            if (result >= 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.CALL
            ++ip
            stack.add( ip )
            ip = code[ ip-1 ]
            nextIteration
          #case Opcode.SCAN_TABLE
          #case Opcode.MARK_SOURCE_POS
          case Opcode.HAS_ANOTHER
            result = select{ scanner.has_another:1 || 0 }
            nextIteration
          case Opcode.READ_CH
            ch = scanner.read
            result = ch
            nextIteration
          case Opcode.READ_AND_DISCARD
            scanner.read
            nextIteration
          case Opcode.SCAN_DIGITS
            local min_digits = code[ ip ]
            local max_digits = code[ ip+1 ]
            local base = code[ ip+2 ]
            ip += 3
            ch = 0
            local n = 0
            loop (max_digits)
              if (scanner.has_another and scanner.peek.is_number(base))
                ch = ch * base + scanner.read.to_number(base)
                ++n
              else
                escapeLoop
              endIf
            endLoop
            result = n - min_digits
            nextIteration
          #case Opcode.PEEK_N
          #case Opcode.CONSUME
          #case Opcode.CONSUME_CHARACTER
          #case Opcode.CONSUME_STRING
          #case Opcode.CLEAR_BUFFER
          #case Opcode.COLLECT_CH
          #case Opcode.COLLECT_STRING
          case Opcode.PRINT_CH
            print ch->Character
            nextIteration
          case Opcode.PRINT_COUNT
            print count
            nextIteration
          case Opcode.PRINT_CHARACTER
            print code[ip]->Character
            ++ip
            nextIteration
          case Opcode.PRINT_STRING
            print strings[ code[ip] ]
            ++ip
            nextIteration
          case Opcode.SET_CH_INT32
            ch = code[ ip ]
            result = ch
            ++ip
            nextIteration
          case Opcode.COMPARE_CH_INT32
            result = ch - code[ip]
            ++ip
            nextIteration
          case Opcode.COMPARE_COUNT_INT32
            result = count - code[ip]
            ++ip
            nextIteration
          case Opcode.TEST_CH
            result = ch
            nextIteration
          case Opcode.TEST_COUNT
            result = count
            nextIteration
          case Opcode.PUSH_CH
            stack.add( ch )
            nextIteration
          case Opcode.POP_CH
            if (stack.is_empty) throw FroleyError( "[Compiled Code]", "'pop' on empty stack." )
            ch = stack.remove_last
            nextIteration
          case Opcode.SET_COUNT_TO_INT32
            count = code[ ip ]
            result = count
            ++ip
            nextIteration
          case Opcode.SET_COUNT_TO_CH
            count = ch
            result = count
            nextIteration
          case Opcode.SET_CH_TO_COUNT
            ch = count
            result = ch
            nextIteration
          case Opcode.ADD_CH_INT32
            ch += code[ ip ]
            ++ip
            nextIteration
          case Opcode.ADD_C_INT32
            count += code[ ip ]
            ++ip
            nextIteration
          case Opcode.SUB_CH_INT32
            ch -= code[ ip ]
            ++ip
            nextIteration
          case Opcode.SUB_C_INT32
            count -= code[ ip ]
            ++ip
            nextIteration
          others
            throw FroleyError( "[INTERNAL] Unhandled opcode: " + Opcode(opcode) )
        endWhich
      endLoop

    method load( data:Byte[] )
      load( DataReader(data) )

    method load( reader:DataReader )
      local version = reader.read_int32x
      require version >= MIN_VERSION
      local n = reader.read_int32x
      strings.reserve( n )
      loop (n) strings.add( reader.read_string )
      n = reader.read_int32x
      code.reserve( n )
      loop (n) code.add( reader.read_int32x )

    method tokenize( file:File )
      if (not file.exists) throw FroleyError( "File not found: $." (file.filepath) )
      tokenize( file.filepath, file.load_as_string )

    method tokenize( filepath, source:String )
      scanner = Scanner( source )
      execute
endClass

