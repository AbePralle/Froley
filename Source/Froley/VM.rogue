module Froley
  uses ParseKit<<Froley>>

class VM
  DEFINITIONS
    VERSION     = 1
    MIN_VERSION = 1

  PROPERTIES
    code    = Int32[]
    stack   = Int32[]
    strings = String[]
    ch      : Int32
    count   : Int32
    result  : Int32
    buffer  = StringBuilder()

    filepath : String
    scanner  : Scanner

    next_line   : Int32
    next_column : Int32

  METHODS
    method init( data:Byte[] )
      load( data )

    method accept( token_type:Int32 )
      println "Accepting $ ($)" (token_type,buffer->String.to_escaped_ascii)

    method execute
      local ip = 0
      loop
        local opcode = code[ ip ]
        ++ip
        #trace Opcode(opcode)
        which (opcode)
          case Opcode.HALT
            return
          case Opcode.RETURN
            if (stack.is_empty) throw FroleyError( "[Compiled Code]", "'return' on empty stack." )
            ip = stack.remove_last
            nextIteration
          case Opcode.ERROR
            throw FroleyError( filepath, scanner.source, scanner.line, scanner.column, buffer->String )
          case Opcode.ACCEPT_INT32
            local token_type = code[ ip ]
            ip = 0
            accept( token_type )
            buffer.clear
          case Opcode.JUMP
            ip = code[ ip ]
            nextIteration
          case Opcode.JUMP_EQ
            if (result == 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_NE
            if (result != 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_LT
            if (result < 0) ip = code[ ip ]
            else            ++ip
            nextIteration
          case Opcode.JUMP_LE
            if (result <= 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.JUMP_GT
            if (result > 0) ip = code[ ip ]
            else            ++ip
            nextIteration
          case Opcode.JUMP_GE
            if (result >= 0) ip = code[ ip ]
            else             ++ip
            nextIteration
          case Opcode.CALL
            ++ip
            stack.add( ip )
            ip = code[ ip-1 ]
            nextIteration
          case Opcode.MARK_SOURCE_POS
            next_line = scanner.line
            next_column = scanner.column
            nextIteration
          case Opcode.HAS_ANOTHER
            result = select{ scanner.has_another:1 || 0 }
            nextIteration
          case Opcode.READ_CH
            ch = scanner.read
            nextIteration
          case Opcode.PEEK_CH_INT32
            ch = scanner.peek( code[ip] )
            ++ip
            nextIteration
          case Opcode.PEEK_CH_COUNT
            ch = scanner.peek( count )
            nextIteration
          case Opcode.CONSUME_CHARACTER
            local value = code[ip]->Character
            if (scanner.consume(value))
              result = 1
              buffer.print( value )
            else
              result = 0
            endIf
            ++ip
            nextIteration
          case Opcode.SCAN_DIGITS
            local min_digits = code[ ip ]
            local max_digits = code[ ip+1 ]
            local base = code[ ip+2 ]
            ip += 3
            ch = 0
            local n = 0
            loop (max_digits)
              if (scanner.has_another and scanner.peek.is_number(base))
                ch = ch * base + scanner.read.to_number(base)
                ++n
              else
                escapeLoop
              endIf
            endLoop
            result = n - min_digits
            nextIteration
          case Opcode.CLEAR_BUFFER
            buffer.clear
            nextIteration
          case Opcode.COLLECT_CH
            buffer.print( ch->Character )
            nextIteration
          case Opcode.COLLECT_CHARACTER
            buffer.print( code[ip]->Character )
            ++ip
            nextIteration
          case Opcode.COLLECT_STRING
            buffer.print( strings[code[ip]] )
            ++ip
            nextIteration
          case Opcode.PRINT_BUFFER
            print (forEach in buffer)
            nextIteration
          case Opcode.PRINT_CH
            print ch->Character
            nextIteration
          case Opcode.PRINT_COUNT
            print count
            nextIteration
          case Opcode.PRINT_CHARACTER
            print code[ip]->Character
            ++ip
            nextIteration
          case Opcode.PRINT_STRING
            print strings[ code[ip] ]
            ++ip
            nextIteration
          case Opcode.COMPARE_CH_INT32
            result = ch - code[ip]
            ++ip
            nextIteration
          case Opcode.COMPARE_COUNT_INT32
            result = count - code[ip]
            ++ip
            nextIteration
          case Opcode.TEST_CH
            result = ch
            nextIteration
          case Opcode.TEST_COUNT
            result = count
            nextIteration
          case Opcode.PUSH_CH
            stack.add( ch )
            nextIteration
          case Opcode.POP_CH
            if (stack.is_empty) throw FroleyError( "[Compiled Code]", "'pop' on empty stack." )
            ch = stack.remove_last
            nextIteration
          case Opcode.SET_CH_TO_INT32
            ch = code[ ip ]
            result = ch
            ++ip
            nextIteration
          case Opcode.SET_CH_TO_COUNT
            ch = count
            result = ch
            nextIteration
          case Opcode.SET_COUNT_TO_INT32
            count = code[ ip ]
            result = count
            ++ip
            nextIteration
          case Opcode.SET_COUNT_TO_CH
            count = ch
            result = count
            nextIteration
          case Opcode.ADD_CH_INT32
            ch += code[ ip ]
            ++ip
            nextIteration
          case Opcode.ADD_COUNT_INT32
            count += code[ ip ]
            ++ip
            nextIteration
          case Opcode.SCAN_TABLE
            local cur_node = ip
            local lookahead = 0
            local last_acceptable_node = 0
            local last_acceptable_link_count = 0
            local last_acceptable_lookahead = 0
            while (scanner.has_another(lookahead+1))
              local link_count = code[cur_node+1]
              if (code[cur_node])
                last_acceptable_node = cur_node
                last_acceptable_link_count = link_count
                last_acceptable_lookahead = lookahead
              endIf
              local c = scanner.peek( lookahead )
              ip = cur_node + 2
              contingent
                loop (link_count)
                  sufficient (c == code[ip])
                  ip += 2
                endLoop
                # No links match - jump to code of last acceptable node.  The
                # start node is always acceptable (and either contains the
                # 'others' case or jumps to the end of the scan table).
                ip = last_acceptable_node + (last_acceptable_link_count+1) * 2
                loop (last_acceptable_lookahead) buffer.print( scanner.read )
                escapeWhile
              satisfied
                ++lookahead
                cur_node = code[ ip+1 ]
              endContingent
            endWhile
            nextIteration
          others
            throw FroleyError( "[INTERNAL] Unhandled opcode: " + Opcode(opcode) )
        endWhich
      endLoop

    method load( data:Byte[] )
      load( DataReader(data) )

    method load( reader:DataReader )
      local version = reader.read_int32x
      require version >= MIN_VERSION
      local n = reader.read_int32x
      strings.reserve( n )
      loop (n) strings.add( reader.read_string )
      n = reader.read_int32x
      code.reserve( n )
      loop (n) code.add( reader.read_int32x )

    method tokenize( file:File )
      if (not file.exists) throw FroleyError( "File not found: $." (file.filepath) )
      tokenize( file.filepath, file.load_as_string )

    method tokenize( filepath, source:String )
      scanner = Scanner( source )
      execute
endClass

