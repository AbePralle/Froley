module Froley
  uses ParseKit<<Froley>>

class FroleyParser : Parser
  METHODS
    method parse_statement( statements:CmdStatements )->Logical
      consume_eols
      local t = peek

      if (consume(TokenType.SYMBOL_LT))
        local name = read_identifier
        must_consume( TokenType.SYMBOL_GT )
        must_consume( TokenType.EOL )
        statements.add( CmdLabel(t,name) )
        return true

      elseIf (consume(TokenType.KEYWORD_HALT))
        statements.add( CmdHalt(t) )
        return true

      elseIf (consume(TokenType.KEYWORD_PRINT))
        if (next_is(TokenType.STRING))
          statements.add( CmdPrintString(t,read.text) )
          must_consume( TokenType.EOL )
          return true
        elseIf (next_is(TokenType.IDENTIFIER))
          local name = read_identifier
          which (name)
            case "a"
              statements.add( CmdPrintA(t) )
              return true
            others
              throw t.error( "Syntax error - valid syntax is 'print <string>' or 'print a'." )
          endWhich
        else
          throw t.error( "FroleyParser.parse_statement() TODO" )
        endIf

      elseIf (consume(TokenType.SYMBOL_PLUS_PLUS))
        local target = parse_access
        statements.add( CmdAdd(t,target,CmdLiteralInt32(t,1)) )
        return true

      elseIf (consume(TokenType.SYMBOL_MINUS_MINUS))
        local target = parse_access
        statements.add( CmdSubtract(t,target,CmdLiteralInt32(t,1)) )
        return true

      else
        local expr = parse_expression
        local t2 = peek
        if (consume(TokenType.SYMBOL_EQUALS))
          local new_value = parse_expression
          statements.add( CmdAssign(t2,expr,new_value) )
        elseIf (consume(TokenType.SYMBOL_PLUS_PLUS))
          statements.add( CmdAdd(t,expr,CmdLiteralInt32(t2,1)) )
        elseIf (consume(TokenType.SYMBOL_MINUS_MINUS))
          statements.add( CmdSubtract(t,expr,CmdLiteralInt32(t2,1)) )
        elseIf (consume(TokenType.SYMBOL_PLUS_EQUALS))
          statements.add( CmdAdd(t,expr,parse_expression) )
        elseIf (consume(TokenType.SYMBOL_MINUS_EQUALS))
          statements.add( CmdSubtract(t,expr,parse_expression) )
        else
          statements.add( expr )
        endIf
        return true

      endIf

      throw peek.error( "Syntax error - unexpected '$'." (peek->String) )

    method parse_access->Cmd
      local t = peek
      local name = read_identifier
      return CmdAccess( t, name )

    method parse_expression->Cmd
      local t = peek
      if (next_is(TokenType.IDENTIFIER))
        return CmdAccess( t, read_identifier )
      elseIf (next_is(TokenType.INTEGER))
        return CmdLiteralInt32( t, read->Int32 )
      else
        throw t.error( "Syntax error - unexpected '$'." (t) )
      endIf

    method read_identifier->String
      if (next_is(TokenType.IDENTIFIER))
        local name = read->String
        return name
      else
        throw peek.error( "Identifier expected." )
      endIf
endClass
