module Froley
  uses ParseKit<<Froley>>

class ParserMethod
  PROPERTIES
    t             : Token
    name          : String
    statements    = CmdStatements()
    type          = MethodTypeParseRule : MethodType
    nested_method : ParserMethod
    start_label   = Label()
    recurse_label = Label()

  METHODS
    method init( t, name )

    method write( assembler:ParserAssembler )
      assembler.this_method = this
      assembler.strings.add( name )
      assembler.define( start_label )
      type.on_begin_method( this, assembler )
      assembler.define( recurse_label )
      forEach (statement in statements)
        statement.write( assembler )
      endForEach
      type.on_end_method( this, assembler )

    method write( cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      type.write( this, cmd, assembler )
endClass

class MethodType [abstract]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler ) [abstract]
    method on_end_method( m:ParserMethod, assembler:ParserAssembler )   [abstract]
    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler ) [abstract]
endClass

class MethodTypeParseRule : MethodType [singleton]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler )
      noAction

    method on_end_method( m:ParserMethod, assembler:ParserAssembler )
      if (m.nested_method)
        assembler.write( ParserOpcode.JUMP, m.nested_method.start_label )
      else
        assembler.write( ParserOpcode.RETURN )
      endIf

    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      local label_no_match = Label()
      local def = cmd.token_type_def
      if (cmd.peek) assembler.write( ParserOpcode.ON_PEEK_TOKEN_TYPE, def.type )
      else          assembler.write( ParserOpcode.ON_TOKEN_TYPE, def.type )
      assembler.write_address( label_no_match )
      assembler.write( ParserOpcode.CREATE_CMD, cmd.cmd_type.index )
      assembler.write( 0 )  # 0 Cmd args
      assembler.write( ParserOpcode.RETURN )
      assembler.define( label_no_match )
endClass

class MethodTypePreUnaryParseRule : MethodType [singleton]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler )
      if (not m.nested_method)
        throw m.t.error( "No nested method for PreUnaryParseRule." )
      endIf

    method on_end_method( m:ParserMethod, assembler:ParserAssembler )
      assembler.write( ParserOpcode.JUMP, m.nested_method.start_label )

    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      local label_no_match = Label()
      local def = cmd.token_type_def
      if (cmd.peek) throw cmd.t.error( "onPeek and elseOnPeek can only be used in regular rules of type ParseRule." )
      assembler.write( ParserOpcode.ON_TOKEN_TYPE, def.type )
      assembler.write_address( label_no_match )

      assembler.write( ParserOpcode.CONSUME_EOLS )
      assembler.write( ParserOpcode.CALL, m.start_label )
      assembler.write( ParserOpcode.CREATE_CMD, cmd.cmd_type.index )
      assembler.write( 1 ) # 1 Cmd arg
      assembler.write( ParserOpcode.RETURN )

      assembler.define( label_no_match )
endClass

class MethodTypePostUnaryParseRule : MethodType [singleton]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler )
      if (m.nested_method)
        assembler.write( ParserOpcode.CALL, m.nested_method.start_label )
      else
        throw m.t.error( "No nested method for PostUnaryParseRule." )
      endIf

    method on_end_method( m:ParserMethod, assembler:ParserAssembler )
      assembler.write( ParserOpcode.RETURN )

    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      local label_no_match = Label()
      local def = cmd.token_type_def
      if (cmd.peek) throw cmd.t.error( "onPeek and elseOnPeek can only be used in regular rules of type ParseRule." )
      assembler.write( ParserOpcode.ON_TOKEN_TYPE, def.type )
      assembler.write_address( label_no_match )

      assembler.write( ParserOpcode.CREATE_CMD, cmd.cmd_type.index )
      assembler.write( 1 ) # 1 Cmd arg
      assembler.write( ParserOpcode.POP_CUR_TOKEN )
      assembler.write( ParserOpcode.JUMP, m.recurse_label )

      assembler.define( label_no_match )
endClass

class MethodTypeBinaryParseRule : MethodType [singleton]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler )
      if (m.nested_method)
        assembler.write( ParserOpcode.CALL, m.nested_method.start_label )
      else
        throw m.t.error( "No nested method for BinaryParseRule." )
      endIf

    method on_end_method( m:ParserMethod, assembler:ParserAssembler )
      assembler.write( ParserOpcode.RETURN )

    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      local label_no_match = Label()
      local def = cmd.token_type_def
      if (cmd.peek) throw cmd.t.error( "onPeek and elseOnPeek can only be used in regular rules of type ParseRule." )
      assembler.write( ParserOpcode.ON_TOKEN_TYPE, def.type )
      assembler.write_address( label_no_match )

      assembler.write( ParserOpcode.CONSUME_EOLS )
      assembler.write( ParserOpcode.CALL, m.nested_method.start_label )
      assembler.write( ParserOpcode.CREATE_CMD, cmd.cmd_type.index )
      assembler.write( 2 ) # 2 Cmd args
      assembler.write( ParserOpcode.POP_CUR_TOKEN )
      assembler.write( ParserOpcode.JUMP, m.recurse_label )
      assembler.define( label_no_match )
endClass


class MethodTypeRightAssociativeBinaryParseRule : MethodType [singleton]
  METHODS
    method on_begin_method( m:ParserMethod, assembler:ParserAssembler )
      if (m.nested_method)
        assembler.write( ParserOpcode.CALL, m.nested_method.start_label )
      else
        throw m.t.error( "No nested method for RightAssociativeBinaryParseRule." )
      endIf

    method on_end_method( m:ParserMethod, assembler:ParserAssembler )
      assembler.write( ParserOpcode.RETURN )

    method write( m:ParserMethod, cmd:ParserCmdOnTypeProduce, assembler:ParserAssembler )
      local label_no_match = Label()
      local def = cmd.token_type_def
      if (cmd.peek) throw cmd.t.error( "onPeek and elseOnPeek can only be used in regular rules of type ParseRule." )
      assembler.write( ParserOpcode.ON_TOKEN_TYPE, def.type )
      assembler.write_address( label_no_match )

      assembler.write( ParserOpcode.CONSUME_EOLS )
      assembler.write( ParserOpcode.CALL, m.start_label )
      assembler.write( ParserOpcode.CREATE_CMD, cmd.cmd_type.index )
      assembler.write( 2 ) # 2 Cmd args
      assembler.write( ParserOpcode.RETURN )
      assembler.define( label_no_match )
endClass


