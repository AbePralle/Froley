module Froley
  uses ParseKit<<Froley>>

class ScanState
  PROPERTIES
    is_acceptable : Logical
    is_visited    : Logical
    is_collected  : Logical
    is_redirected : Logical
    label         = Label()
    code_label    = Label()
    links         = Table<<Character,ScanState>>()
    statements    = CmdStatements()

  METHODS
    method cloned->ScanState
      local result = ScanState()
      result.is_acceptable = is_acceptable
      forEach (key in links.keys) result.links[ key ] = links[ key ]
      result.statements.add( statements )
      return result

    method collect( states:ScanState[] )
      if (is_collected) return
      is_collected = true
      states.add( this )
      (forEach in links).collect( states )

    method link( ch:Character )->ScanState
      local entry = links.find( ch )
      if (entry)
        return entry.value
      else
        local result = ScanState()
        links[ ch ] = result
        return result
      endIf

    method resolve
      if (is_visited) return
      is_visited = true
      (forEach in links).resolve
      statements.resolve
      is_visited = false

    method write( assembler:TokenizerAssembler, label_end:Label )
      assembler.define( label )
      if (statements.count) is_acceptable = true
      assembler.write( which{is_acceptable:1 || 0} )

      # Write links
      assembler.write( links.count )
      forEach (key in links.keys)
        assembler.write( key->Int32 )
        assembler.write_address( links[key].label )
      endForEach

      # Write code
      if (not is_redirected) assembler.define( code_label )
      statements.write( assembler )
      if (is_acceptable)
        assembler.write( TokenizerOpcode.JUMP )
        assembler.write_address( label_end )
      endIf

    method to->String
      if (is_collected) return "*"
      is_collected = true

      local builder = StringBuilder()
      if (is_acceptable or statements.count) builder.print('[')

      local st = links->String.leftmost(-1)

      is_collected = false

      builder.print( label->String ).print( st ).print( '}' )
      if (is_acceptable or statements.count) builder.print(']')

      return builder->String
endClass

