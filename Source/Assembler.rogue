module Froley
  uses ParseKit<<Froley>>

class Assembler [abstract]
  PROPERTIES
    code              = Int32[]
    unresolved_labels = Label[]
    labels            = StringTable<<Label>>()
    strings           = StringLookupList()
    variables         = StringLookupList()

  METHODS
    method define( label:Label )
      if (label.address.exists)
        throw FroleyError( "Label defined multiple times: $." (label.name) )
      else
        label.address = code.count
        label.backpatch( code )
        unresolved_labels.remove( label )
      endIf

    method define( label_name:String )
      define( label(label_name) )

    method label( label_name:String )->Label
      local result = labels[ label_name ]
      if (result) return result
      ensure result( label_name )
      labels[ label_name ] = result
      return result

    method to->Byte[] [abstract]

    method write( value:Int32 )
      code.add( value )

    method write_address( label:Label )
      if (label.address.exists)
        write( label.address.value )
      else
        if (label.backpatch_list.is_empty) unresolved_labels.add( label )
        label.backpatch_list.add( code.count )
        write( 0 )
      endIf

    method write_address( label_name:String )
      write_address( label(label_name) )

    method write_var( varname:String )
      variables.add( varname )  # redundant adds are okay
      write( variables.locate(varname).value )

endClass

