[tokenizer_keywords]
KEYWORD_COLLECT      collect

[common_keywords]
KEYWORD_END_WHICH    endWhich    [structural]
KEYWORD_END_WHILE    endWhile    [structural]
KEYWORD_ESCAPE_WHILE escapeWhile
KEYWORD_CASE         case
KEYWORD_HALT         halt
KEYWORD_HAS_ANOTHER  hasAnother
KEYWORD_OTHERS       others
KEYWORD_PRODUCE      produce
KEYWORD_WHICH        which
KEYWORD_WHILE        while

[symbols]
SYMBOL_COLON        :
SYMBOL_COMMA        ,
SYMBOL_DOT_DOT      ..
SYMBOL_EQUALS       =
SYMBOL_CLOSE_PAREN  )
SYMBOL_CLOSE_SQUARE ]
SYMBOL_GT           >
SYMBOL_LT           <
SYMBOL_MINUS        -
SYMBOL_OPEN_PAREN   (
SYMBOL_OPEN_SQUARE  [
SYMBOL_SINGLE_QUOTE '\''

[tokenizer]
- tokenize_froley
  if (not hasAnother) halt

  while (consume(' ') or consume('\t')) noAction
  markSourcePosition

  if (consume('\n')) produce EOL

  if (scanIdentifier)
    which (buffer)
      produceAny tokenizer_keywords
      produceAny common_keywords
      others:    produce IDENTIFIER(buffer)
    endWhich
  endIf

  if (scanNumber) produce INTEGER(buffer)

  which (input)
    produceAny [symbols]
    others
      ch = peek
      if (ch is digit)
        scan_integer
        produce INTEGER
      endIf
  endWhich

  syntaxError
